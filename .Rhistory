summary(lm)
plot(seizures ~ age, data=epilepsy)
lm
plot(seizures ~ age, data=epilepsy, main="Seizures ~ Age")
range(epilepsy$age)
mean(epilepsy$age)
median(epilepsy$age)
epilepsy$age
plot(seizures ~ age, data=epilepsy, main="Seizures ~ Age")
lm <- lm(seizures ~ treat+expind+age, data=epilepsy)
lm
summary(lm)
mean(epilepsy$seizures)
median(epilepsy$seizures)
mean(epilepsy$age)
median(epilepsy$age)
boxplot(epilepsy$seizures)
boxplot(epilepsy$age)
boxplot(epilepsy$seizures, main="boxplot of seizures")
boxplot(epilepsy$age, main="boxplot of age")
######
#trim mean
mean(epilepsy$seizures, trim = .05)
mean(epilepsy$seizures,trim = .1)
mean(epilepsy$seizures,trim = .15)
mean(epilepsy$seizures,trim = .1)
winsor.mean(epilepsy$seizures, trim=.05)
winsor.mean(epilepsy$seizures, trim=.1)
mean(epilepsy$age, trim = .05)
mean(epilepsy$age,trim = .1)
winsor.mean(age$seizures, trim=.05)
winsor.mean(epilepsy$age, trim=.05)
winsor.mean(epilepsy$age, trim=.1)
#####
Trim(epilepsy, trim=.05, na.rm=FALSE)
#####
install.packages("trim")
Trim(epilepsy, trim=.05, na.rm=FALSE)
#####
install.packages("Trim")
Trim(epilepsy, trim=.05, na.rm=FALSE)
#####
install.packages("DescTools")
Trim(epilepsy, trim=.05, na.rm=FALSE)
trim(epilepsy, trim=.05, na.rm=FALSE)
#####
#install.packages("DescTools")
library(DescTools)
Trim(epilepsy, trim=.05, na.rm=FALSE)
Trim(epilepsy$seizures, trim=.05, na.rm=FALSE)
Trim(epilepsy$age, trim=.05, na.rm=FALSE)
Trim(epilepsy$seizures, trim=.05, na.rm=FALSE)
windsor.sd(epilepsy$seizures, trim=.05)
library(psych)
winsor.sd(epilepsy$seizures, trim=.05)
sd(epilepsy$seizures)
winsor.sd(epilepsy$seizures,trim=.1)
sd(epilepsy$seizures)
winsor.sd(epilepsy$seizures, trim=.05)
winsor.sd(epilepsy$seizures,trim=.1)
####
describe(epilepsy$seizures,trim=.05)
describe(winsor(epilepsy$seizures,trim=.05))
####
describe(epilepsy)
####
describe(epilepsy)
quantile(epilepsy, prob = c(0.10, 0.90))
quantile(epilepsy$seizures, prob = c(0.10, 0.90))
####
install.packages("ggstatsplot")
install.packages("ggstatsplot")
####
#install.packages("ggstatsplot")
library(ggstatsplot)
####
#install.packages("ggstatsplot")
library(ggstatsplot)
library(tibble)
####
boxplot(epilepsy$seizures,plot=FALSE)$out
####
outlizers <- boxplot(epilepsy$seizures,plot=FALSE)$out
####
outliers <- boxplot(epilepsy$seizures,plot=FALSE)$out
x<-warpbreaks
x<-epilepsy
x<-x[-which(x$seizrues %in% outliers),]
x
####
outliers <- boxplot(epilepsy$seizures,plot=FALSE)$out
x<-epilepsy
x<-x[-which(x$seizrues %in% outliers),]
x
x<-x[-which(x$seizures %in% outliers),]
x
x<-epilepsy
x<-x[-which(x$seizures %in% outliers),]
x
lm(x)
lm(seizures ~ treat+expind+age,data=x)
boxplot(x$seizures)
boxplot(x$seizures, main="boxplot of seizures, trimmed")
boxplot(x$age,main="boxplot of age, trimmed")
boxplot(x$seizures, main="boxplot of seizures, trimmed")
boxplot(x$seizures ~ x$age)
lm(seizures ~ treat+expind+age,data=x)
x.lm <- lm(seizures ~ treat+expind+age,data=x)
summary(x.lm)
x.lm <- lm(seizures ~ treat+age,data=x)
summary(x.lm)
x.lm <- lm(seizures ~ treat,data=x)
summary(x.lm)
x.lm <- lm(seizures ~ treat+age+expind,data=x)
x.lm <- lm(seizures ~ treat+expind,data=x)
summary(x.lm)
x.lm <- lm(seizures ~ age+expind,data=x)
summary(x.lm)
summary(lm(seizures ~treat+expind+age, data=epilepsy))
summary(x)
describe(x)
####
library(olsrr)
x.lm <- lm(seizures ~ age + treat + expind + timeadj)
x.lm <- lm(seizures ~ age + treat + expind + timeadj, data=x)
ols_step_best_subset(x.lm,print_plot = TRUE)
ols_step_all_possible(x.lm)
x.lm <- lm(age ~ seizures + treat + expind + timeadj, data=x)
ols_step_best_subset(x.lm,print_plot = TRUE)
summary(x.lm)
install.packagers("knitr")
install.packages("knitr")
students <- c(Abraham, Beatrice, Cory, Dinah, Eric, Felicia)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
students
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
print(students.name)
}
roll_call
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
print(students)
}
roll_call
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (i in students){
print(students[i])
}
}
roll_call
roll_call(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (i in students){
print(i)
}
}
roll_call(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (i in students){
print(i)
print(sample(33,3))
}
}
locker_combinations(students)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
secondLetter <- substr(i,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (secondLetter == "e"){
print(student)
print(sample(33,3))
}
}
substr("abraham",2,2)
"e" == "e"
secondLetter <- substr("felicia",2,2)
secondLetter
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
secondLetter <- substr(student),2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (secondLetter == "e"){
print(student)
print(sample(33,3))
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
secondLetter <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (secondLetter == "e"){
print(student)
print(sample(33,3))
}
}
library(dplyr)
gc()
View(some.quest)
View(stack.x)
clear()
clear
rm()
rm(list = ls())
# Spread
# If we have data that was collected or obtained in a long format, we can use tidyr's spread() function to spread out a variable column of multiple measurements into columns for each variable.
wide_table <- long_table %>% spread(key="Metric",value="Score")
library(tidyverse)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
demo_table <- read.csv(file="demo.csv",check.names=F,stringsAsFactors = F)
setwd("~/Documents/Bootcamp/Homework/Module15_R")
demo_table <- read.csv(file="demo.csv",check.names=F,stringsAsFactors = F)
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
demo_table <- read.csv(file="demo.csv",check.names=F,stringsAsFactors = F)
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
filter_table2
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
filter_table3
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
# Tidyverse package contains libraries such as dplyr, tidyr, and ggplot2
library(tidyverse)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
demo_table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
summarize_demo
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
summarize_demo
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
wide_table <- long_table %>% spread(key="Metric",value="Score")
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))#import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
> plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
> plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
> plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
> plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
> plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
> geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=class)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(class)) + #create multiple boxplots, one for each class
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(x=class,y=Rating,color=manufacturer)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(manufacturer)) + #create multiple boxplots, one for each class
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("class") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(x=class,y=Rating,color=class)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(manufacturer)) + #create multiple boxplots, one for each class
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("class") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
?t.test()
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
library(dpylr)
library(dplyr)
MechaCar_mpg <- read.csv(file="Resources/MechaCar_mpg.csv",check.names=F,stringsAsFactors = F)
#read in mechacar_mpg.csv
MechaCar_mpg <- read.csv(file="/Resources/MechaCar_mpg.csv",check.names=F,stringsAsFactors = F)
setwd("~/Documents/Bootcamp/Homework/MechaCar_Statistical_Analysis")
MechaCar_mpg <- read.csv(file="/Resources/MechaCar_mpg.csv",check.names=F,stringsAsFactors = F)
setwd("~/Documents/Bootcamp/Homework/MechaCar_Statistical_Analysis")
MechaCar_mpg <- read.csv(file="/Resources/MechaCar_mpg.csv",check.names=F,stringsAsFactors = F)
MechaCar_mpg <- read.csv(file="Resources/MechaCar_mpg.csv",check.names=F,stringsAsFactors = F)
MechaCar_mpg
lm(mpg ~ vehicle_length
+ vehicle_weight
+ spoiler_angle
+ ground_clearance
+ AWD,data=MechaCar_mpg)
summary(lm(mpg ~ vehicle_length
+ vehicle_weight
+ spoiler_angle
+ ground_clearance
+ AWD,data=MechaCar_mpg))
car_mpg_df <- read.csv(file="Resources/MechaCar_mpg.csv",check.names=F,stringsAsFactors = F)
#load in dplyr package
library(tidyverse)
library(dplyr)
#read in mechacar_mpg.csv
car_mpg_df <- read.csv(file="Resources/MechaCar_mpg.csv",check.names=F,stringsAsFactors = F)
#generate multiple linear regression model
lm(mpg ~ vehicle_length
+ vehicle_weight
+ spoiler_angle
+ ground_clearance
+ AWD,data=car_mpg_df)
#generate summary stats
summary(lm(mpg ~ vehicle_length
+ vehicle_weight
+ spoiler_angle
+ ground_clearance
+ AWD,data=car_mpg_df))
library(readxl)
Suspension_Coil <- read_excel("Resources/Suspension_Coil.csv")
View(Suspension_Coil)
Suspension_Coil <- read.csv("~/Documents/Bootcamp/Homework/MechaCar_Statistical_Analysis/Resources/Suspension_Coil.csv")
View(Suspension_Coil)
Suspension_Coil <- read.csv("~/Documents/Bootcamp/Homework/MechaCar_Statistical_Analysis/Resources/Suspension_Coil.csv")
View(Suspension_Coil)
View(Suspension_Coil)
View(Suspension_Coil)
total_summary <- Suspension_Coil %>% summarize(mean = mean(PSI), median = median(PSI), variance = variance(PSI), SD = sd(PSI))
total_summary <- Suspension_Coil %>% summarize(mean = mean(PSI), median = median(PSI), variance = var(PSI), SD = sd(PSI))
total_summary
lot_summary
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(mean = mean(PSI), median = median(PSI), variance = var(PSI), SD = sd(PSI), .groups ='keep')
lot_summary
View(lot_summary)
View(lot_summary)
?t.test()
supension_coil_df <- read.csv("~/Documents/Bootcamp/Homework/MechaCar_Statistical_Analysis/Resources/Suspension_Coil.csv")
View(supension_coil_df)
View(Suspension_Coil)
suspension_coil_df <- read.csv("~/Documents/Bootcamp/Homework/MechaCar_Statistical_Analysis/Resources/Suspension_Coil.csv")
View(suspension_coil_df)
lot_1 <- suspension_coil_df 5>% filter(Lot==Lot1)
> lot_1 <- suspension_coil_df %>% filter(Lot==Lot1)
View(supension_coil_df)
lot_1 <- suspension_coil_df %>% filter(Manufacturing_Lot==Lot1)
lot_1 <- suspension_coil_df %>% filter(Manufacturing_Lot=="Lot1")
lot_1
?subset()
subset(suspension_coil_df, Manufacturing_Lot ="Lot1")
subset(suspension_coil_df, Manufacturing_Lot == "Lot1")
t.test((subset(suspension_coil_df, Manufacturing_Lot == "Lot1"))$PSI, mu = 1500)
t.test((subset(suspension_coil_df, Manufacturing_Lot == "Lot2"))$PSI, mu = 1500)
t.test((subset(suspension_coil_df, Manufacturing_Lot == "Lot3"))$PSI, mu = 1500)
View(car_mpg_df)
View(total_summary)
View(total_summary)
View(lot_1)
View(lot_1)
View(lot_summary)
View(lot_summary)
View(car_mpg_df)
View(car_mpg_df)
library(corrplot)
df_cor <- cor(car_mpg_df)
corrplot(df_cor)
library(corrplot)
library(corrplot)
library(corrplot)
df_cor <- cor(car_mpg_df)
corrplot(df_cor)
corrplot(df_cor, method='number')
testRes = cor.mtest(car_mpg_df, conf.level = 0.95)
## leave blank on non-significant coefficient
## add significant correlation coefficients
corrplot(M, p.mat = testRes$p, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8, order = 'AOE', diag=FALSE)
testRes = cor.mtest(df_cor, conf.level = 0.95)
## leave blank on non-significant coefficient
## add significant correlation coefficients
corrplot(df_cor, p.mat = testRes$p, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8, order = 'AOE', diag=FALSE)
testRes = cor.mtest(car_mpg_df, conf.level = 0.95)
## leave blank on non-significant coefficient
## add significant correlation coefficients
corrplot(df_cor, p.mat = testRes$p, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8, order = 'AOE', diag=FALSE)
corrplot(df_cor, method='number')
lm(mpg ~ vehicle_length, data=car_mpg_df)
summary(lm(mpg ~ vehicle_length, data=car_mpg_df))
summary(lm(mpg ~ vehicle_length + ground_clearance, data=car_mpg_df))
corrplot(df_cor, p.mat = testRes$p, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8, order = 'AOE', diag=FALSE)
t.test(suspension_coil_df$PSI, mu=1500)
mpg_matrix <- as.matrix(car_mpg_df[,c("vehicle_length","ground_clearance","mpg")]) #convert data frame into numeric matrix
cor(mpg_matrix)
mpg_matrix <- as.matrix(car_mpg_df) #convert data frame into numeric matrix
cor(mpg_matrix)
testRes = cor.mtest(car_mpg_df, conf.level = 0.95)
## leave blank on non-significant coefficient
## add significant correlation coefficients
corrplot(df_cor, p.mat = testRes$p, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8, order = 'AOE', diag=FALSE)
corrplot(df_cor, method='number')
